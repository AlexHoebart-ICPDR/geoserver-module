<?php

require_once('geoserver.openlayers.inc');

/**
 * Implements hook_ctools_plugin_api().
 *
 * Required for OpenLayers integration.
 */
function geoserver_ctools_plugin_api($module, $api) {
  return array('version' => 1);
}

/**
 * Implements hook_user_login().
 */
function geoserver_user_login(&$edit, $account) {

  $url    = variable_get('geoserver_url', '');
  $fields = 'username='.urlencode($edit['values']['name']).'&password='.urlencode($edit['values']['pass']).'&_spring_security_remember_me=on';
  
  $file   = _geoserver_get_cookiefile();
  file_put_contents($file, '');

  $request = curl_init( trim($url, '/').'/j_spring_security_check');
  curl_setopt($request, CURLOPT_POST, 3);
  curl_setopt($request, CURLOPT_POSTFIELDS, $fields);
  curl_setopt($request, CURLOPT_COOKIEJAR, $file);
  curl_setopt($request, CURLOPT_RETURNTRANSFER, TRUE);
  curl_exec($request);
  curl_close($request);
  
  // parse cookie file
  $cookies = array();
  $lines = file($file); 
  foreach ($lines as $line){ 
    if ('#' === $line{0})
      continue;
    $columns = explode("\t", $line); 
    if (isset($columns[5]) && isset($columns[6])) 
      $cookies[$columns[5]] = substr($columns[6], 0, -1); 
  }
  
  if (isset($cookies['SPRING_SECURITY_REMEMBER_ME_COOKIE']) && 
      $cookies['SPRING_SECURITY_REMEMBER_ME_COOKIE'] != '""') {
    setcookie('JSESSIONID', $cookies['JSESSIONID'], 0, '/');
    setcookie('SPRING_SECURITY_REMEMBER_ME_COOKIE', $cookies['SPRING_SECURITY_REMEMBER_ME_COOKIE'], 0, '/');
  } else {
    watchdog('geoserver', t('Could not authenticate %username at %url.'),
        array('%username' => urlencode($edit['values']['name']), '%url' => $url), WATCHDOG_ERROR);
  }
}

/**
 * Implements hook_user_login().
 */
function geoserver_user_logout($account) {
  // TODO: logout at geoserver
  setcookie('JSESSIONID', '', 1, '/');
  setcookie('SPRING_SECURITY_REMEMBER_ME_COOKIE', '', 1, '/');
  unlink(_geoserver_get_cookiefile());
}

/**
 * Implements hook_node_insert().
 */
function geoserver_node_insert($node) {
  geoserver_truncate($node);
}

/**
 * Implements hook_node_update().
 */
function geoserver_node_update($node) {
  geoserver_truncate($node);
}

/**
 * Implements hook_node_delete().
 */
function geoserver_node_delete($node) {
  geoserver_truncate($node);
}

/**
 * Truncate GeoWebCache after changes to specific node. 
 * Requires a cached WMS layer for the content type of the node.
 */
function geoserver_truncate($node) {
  
  $content_type_settings = variable_get('geoserver_content_type_settings', array());

  if (isset($content_type_settings[$node->type]) && $content_type_settings[$node->type]['gwc']) {
    // node belongs to a content type with a GeoWebCache layer
    
    $workspace = variable_get('geoserver_workspace', '');
    $settings = $content_type_settings[$node->type];
    $field_name = substr($settings['geometry_column'], 0, -9);
    $field = field_info_field($field_name);

    $geo_set = new postgis_geometry_set($field['settings']['type'], $field['settings']['srid']);
    $geo_set->fromGeometry($node->{$field_name}[$node->language]);

    if (isset($node->original)) {
      foreach ($node->original->{$field_name}[$node->language] as $geometry) {
        $geo = new postgis_geometry($field['settings']['type'], $field['settings']['srid']);
        $geo->fromGeometry($geometry);
        $geo_set->add($geo);
      }
    }

    $layer = $workspace . ':' . trim($settings['layer']);
    $srid = explode(':', $settings['gwc_srs']);
    $bbox = preg_split('/[\, ]/', substr($geo_set->getBox(0.1, $srid[1]), 4, -1));

    if (count($bbox) == 4) {

      $message  ='<?xml version="1.0" encoding="UTF-8"?>
                  <seedRequest>
                    <name>' . $layer . '</name>
                    <bounds>
                      <coords>
                        <double>' . $bbox[0] . '</double>
                        <double>' . $bbox[1] . '</double>
                        <double>' . $bbox[2] . '</double>
                        <double>' . $bbox[3] . '</double>
                      </coords>
                    </bounds>
                    <gridSetId>' . $settings['gwc_srs'] . '</gridSetId>
                    <zoomStart>0</zoomStart>
                    <zoomStop>20</zoomStop>
                    <format>image/png</format>
                    <type>truncate</type>
                    <threadCount>1</threadCount>
                  </seedRequest>';

      geoserver_post('/gwc/rest/seed/'.$layer.'.xml', $message);
    }
  }
}

function geoserver_post($url, $content) {

  $url = trim(variable_get('geoserver_url', ''), '/') . '/' . trim($url, '/');

  $headers = array(
    'Content-Length: ' . strlen($content),
    'Content-type: text/xml',
  );

  $request = curl_init($url);

  curl_setopt($request, CURLOPT_POST, TRUE);
  curl_setopt($request, CURLOPT_POSTFIELDS, $content);
  curl_setopt($request, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($request, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($request, CURLOPT_COOKIEFILE, _geoserver_get_cookiefile());

  $result = new stdClass;
  $result->data = curl_exec($request);
  $result->code = curl_getinfo($request, CURLINFO_HTTP_CODE);
  curl_close($request);

  if ($result->code === 200) {
    watchdog('geoserver', t('Requested %url.'), array('%url' => $url));
  } else {
    watchdog('geoserver', t('Requested %url with error %code: %message'),
      array('%url' => $url, '%code' => $result->code, '%message' => $result->data), WATCHDOG_ERROR);
  }

  return $result;
}

function geoserver_get($url) {

  $url = trim(variable_get('geoserver_url', ''), '/') . '/' . trim($url, '/');
  
  $request = curl_init($url);

  curl_setopt($request, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($request, CURLOPT_COOKIEFILE, _geoserver_get_cookiefile());

  $result = new stdClass();
  $result->data = curl_exec($request);
  $result->code = curl_getinfo($request, CURLINFO_HTTP_CODE);
  curl_close($request);

  if ($result->code === 200) {
    watchdog('geoserver', t('Requested %url.'), array('%url' => $url));
  } else {
    watchdog('geoserver', t('Requested %url with error %code: %message'),
      array('%url' => $url, '%code' => $result->code, '%message' => $result->data), WATCHDOG_ERROR);
  }

  return $result;
}

function geoserver_admin() {
  $url = variable_get('geoserver_url', '');
  return array('#markup' => '<iframe src="'.$url.'" width="100%" height="2000px" onload="jQuery(\'iframe\').contents().find(\'#header\').hide()"></iframe>');
}

/**
 * Implements hook_menu().
 */
function geoserver_menu() {
  $items = array();

  $items['admin/config/system/geoserver'] = array(
    'title' => 'GeoServer',
    'description' => t('GeoServer settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geoserver_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  
  $items['admin/geoserver'] = array(
    'title' => 'GeoServer',
    'description' => t('GeoServer administration.'),
    'page callback' => 'geoserver_admin',
    'access arguments' => array('administer site configuration'),
  );

  $items['admin/structure/types/manage/%node_type/geoserver'] = array(
    'title' => t('GeoServer'),
    'description' => t('Publish content type with GeoServer.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geoserver_content_type_settings', 4),
    'access callback' => 'geoserver_content_type_settings_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'file' => 'geoserver.admin.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 *  Function to generate the form setting array
 */
function geoserver_settings_form() {

  $form = array(
    'geoserver_url' => array(
      '#type' => 'textfield',
      '#title' => t('URL'),
      '#default_value' => variable_get('geoserver_url', ''),
    ),
    // TODO: fetch workspaces and namespaces over REST API and provide dropdown fields
    'geoserver_workspace' => array(
      '#type' => 'textfield',
      '#title' => t('Workspace'),
      '#default_value' => variable_get('geoserver_workspace', ''),
    ),
    'geoserver_namespace' => array(
      '#type' => 'textfield',
      '#title' => t('Namespace URI'),
      '#default_value' => variable_get('geoserver_namespace', ''),
    ),
  );
  return system_settings_form($form);
}

/**
 * Check if a given entity has geospatial attributes.
 *
 * @param stdClass $entity
 * @return boolean
 */
function geoserver_content_type_settings_access($entity) {

  $fields = field_info_instances('node', $entity->type);

  foreach ($fields as $field) {
    if ($field['widget']['module'] === 'postgis') {
      return true;
    }
  }

  return false;
}

/**
 * Get path of file where GeoServer's session cookies are stored.
 * 
 * @global stdClass $user
 * @return string  
 */
function _geoserver_get_cookiefile() {
  global $user;
  return file_directory_temp().'/geoserver_session_user_'.$user->uid;
}